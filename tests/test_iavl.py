from hexbytes import HexBytes
from iavl.iavl import NodeDB, Tree


def test_basic_ops():
    """
    the expected root hashes are generated by equivalent golang code:

    ```
    package main

    import (
        "fmt"

        "github.com/cosmos/iavl"
        db "github.com/tendermint/tm-db"
    )

    func main() {
        d := db.NewMemDB()
        tree, err := iavl.NewMutableTree(d, 100, true)
        if err != nil {
            panic(err)
        }
        _, err = tree.Set([]byte("hello"), []byte("world"))
        if err != nil {
            panic(err)
        }
        hash, v, err := tree.SaveVersion()
        if err != nil {
            panic(err)
        }
        fmt.Printf("%d %X\n", v, hash)

        _, err = tree.Set([]byte("hello"), []byte("world1"))
        if err != nil {
            panic(err)
        }
        _, err = tree.Set([]byte("hello1"), []byte("world1"))
        if err != nil {
            panic(err)
        }
        hash, v, err = tree.SaveVersion()
        if err != nil {
            panic(err)
        }
        fmt.Printf("%d %X\n", v, hash)

        tree.Set([]byte("hello2"), []byte("world1"))
        tree.Set([]byte("hello3"), []byte("world1"))
        hash, v, err = tree.SaveVersion()
        if err != nil {
            panic(err)
        }
        fmt.Printf("%d %X\n", v, hash)

        for i := 0; i < 20; i++ {
            tree.Set([]byte(fmt.Sprintf("hello%d", i)), []byte("world1"))
        }
        hash, v, err = tree.SaveVersion()
        if err != nil {
            panic(err)
        }
        fmt.Printf("%d %X\n", v, hash)
    }
    ```
    """
    db = NodeDB()
    tree = Tree(db, 0)
    assert not tree.set(b"hello", b"world")
    assert (
        HexBytes("6032661AB0D201132DB7A8FA1DA6A0AFE427E6278BD122C301197680AB79CA02")
        == tree.save_version()
    )

    tree = Tree(db, 1)
    assert b"world" == tree.get(b"hello")
    assert tree.set(b"hello", b"world1")
    assert not tree.set(b"hello1", b"world1")
    assert (
        HexBytes("457D81F933F53E5CFB90D813B84981AA2604D69939E10C94304D18287DED31F7")
        == tree.save_version()
    )

    tree = Tree(db, 2)
    assert b"world1" == tree.get(b"hello")
    assert b"world1" == tree.get(b"hello1")
    tree.set(b"hello2", b"world1")
    tree.set(b"hello3", b"world1")
    assert (
        HexBytes("C7AB142752ADD0374992261536E502851CE555D243270D3C3C6B77CF31B7945D")
        == tree.save_version()
    )

    tree = Tree(db, 3)
    assert b"world1" == tree.get(b"hello3")

    node = db.get(db.get_root_hash(3))
    assert 2 == node.height

    for i in range(20):
        tree.set(b"hello%d" % i, b"world1")
    assert (
        HexBytes("5BB5974DC9FD3943E2FB096DE6F2470CAE375F7B877E4335DBA8E73CE587B232")
        == tree.save_version()
    )
