import rocksdb
from hexbytes import HexBytes
from iavl.iavl import NodeDB, Tree


def test_basic_ops(tmp_path):
    """
    the expected root hashes are generated by equivalent golang code:
    $ go run ./ref.go
    """
    print("db", tmp_path)
    exp_root_hashes = {
        1: HexBytes("6032661AB0D201132DB7A8FA1DA6A0AFE427E6278BD122C301197680AB79CA02"),
        2: HexBytes("457D81F933F53E5CFB90D813B84981AA2604D69939E10C94304D18287DED31F7"),
        3: HexBytes("C7AB142752ADD0374992261536E502851CE555D243270D3C3C6B77CF31B7945D"),
        4: HexBytes("5BB5974DC9FD3943E2FB096DE6F2470CAE375F7B877E4335DBA8E73CE587B232"),
        5: HexBytes("E4E0D619CFE08FF64D6384529F49A2BDFFF4A4B7FA64E268A2159EF7F03CB858"),
    }
    db = NodeDB(rocksdb.DB(str(tmp_path), rocksdb.Options(create_if_missing=True)))
    tree = Tree(db, 0)
    assert not tree.set(b"hello", b"world")
    assert exp_root_hashes[1] == tree.save_version()

    tree = Tree(db, 1)
    assert b"world" == tree.get(b"hello")
    assert tree.set(b"hello", b"world1")
    assert not tree.set(b"hello1", b"world1")
    assert exp_root_hashes[2] == tree.save_version()

    tree = Tree(db, 2)
    assert b"world1" == tree.get(b"hello")
    assert b"world1" == tree.get(b"hello1")
    tree.set(b"hello2", b"world1")
    tree.set(b"hello3", b"world1")
    assert exp_root_hashes[3] == tree.save_version()

    tree = Tree(db, 3)
    assert b"world1" == tree.get(b"hello3")

    node = db.get(db.get_root_hash(3))
    assert 2 == node.height

    for i in range(20):
        tree.set(b"hello%d" % i, b"world1")
    assert exp_root_hashes[4] == tree.save_version()

    tree.remove(b"hello")
    h = tree.save_version()
    assert not tree.get(b"hello")
    assert exp_root_hashes[5] == h
